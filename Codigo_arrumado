import streamlit as st
from openai import OpenAI
import fitz  # PyMuPDF
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from math import pi
import json
import re
import tempfile
import os

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Assistente de An√°lise InternReady", page_icon="üöÄ", layout="wide")
st.title("üöÄ Assistente de An√°lise InternReady")
st.markdown("### An√°lise de curr√≠culo especializada para o setor financeiro")

# Sidebar
with st.sidebar:
    st.header("Configura√ß√µes")
    api_key = st.text_input("üîë Cole sua *Chave InternReady*:", type="password")
    st.markdown("---")
    st.markdown("### Como usar:")
    st.markdown("1. Insira sua chave de API\n2. Fa√ßa upload do curr√≠culo em PDF\n3. Clique em 'Analisar Curr√≠culo'")

# Upload de arquivo
st.header("üìÑ Upload do Curr√≠culo")
uploaded_file = st.file_uploader("Envie seu curr√≠culo em PDF", type="pdf")

if uploaded_file and api_key:
    if st.button("üîç Analisar Curr√≠culo"):
        try:
            # Configurar cliente OpenAI
            client = OpenAI(api_key=api_key)
            
            # Processar PDF
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_file:
                temp_file.write(uploaded_file.getvalue())
                pdf_path = temp_file.name

            # Extrair texto do PDF
            doc = fitz.open(pdf_path)
            texto_curriculo = ""
            for page in doc:
                texto_curriculo += page.get_text()
            doc.close()
            
            # Limpar arquivo tempor√°rio
            os.unlink(pdf_path)

            # Prompt para an√°lise
            prompt = f"""
Voc√™ √© um consultor de carreira especializado em perfis voltados para o setor financeiro. Sua tarefa √© analisar o curr√≠culo abaixo com base em compet√™ncias valorizadas nesse mercado.

**Parte 1 ‚Äì An√°lise Quantitativa**
- Identifique as principais **√°reas de compet√™ncia profissional** (ex: Finan√ßas, Economia, Risco, An√°lise de Dados, Excel, Programa√ß√£o, Comunica√ß√£o, etc.).
- Para cada √°rea, atribua uma nota de **0 a 100**, com base nas evid√™ncias fornecidas no texto como um especialista em recursos humanos com muitos anos de pr√°tica. **N√£o infira habilidades n√£o mencionadas.**
- A resposta deve estar no formato JSON conforme exemplo:

[
  {{"√Årea": "Gest√£o Financeira", "Pontua√ß√£o": 82}},
  {{"√Årea": "Excel Avan√ßado", "Pontua√ß√£o": 78}}
]

**Parte 2 ‚Äì An√°lise Qualitativa (em portugu√™s)**
- Pontos fortes mais evidentes
- Pontos que podem ser melhor desenvolvidos ou explicitados
- Sugest√µes pr√°ticas para aprimorar o curr√≠culo para o mercado financeiro

Texto do curr√≠culo:
{texto_curriculo}
"""

            # Chamar API OpenAI
            with st.spinner("‚è≥ Analisando com IA..."):
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.3
                )

            resposta_completa = response.choices[0].message.content
            
            # Extrair JSON da resposta
            match = re.search(r'\[(.*?)\]', resposta_completa, re.DOTALL)
            if not match:
                st.error("‚ùå Erro: N√£o foi poss√≠vel extrair os dados de compet√™ncias da resposta da IA.")
                st.text("Resposta da IA:")
                st.text(resposta_completa)
            else:
                try:
                    dados_json = json.loads("[" + match.group(1) + "]")
                    df = pd.DataFrame(dados_json)
                    
                    # Verificar se o DataFrame n√£o est√° vazio
                    if df.empty:
                        st.error("‚ùå Nenhuma compet√™ncia foi identificada no curr√≠culo.")
                    else:
                        df = df.sort_values(by="Pontua√ß√£o", ascending=True)

                        # Tabela de compet√™ncias
                        st.header("üìå Tabela de Compet√™ncias")
                        st.dataframe(df, use_container_width=True)

                        # Definir m√≠nimos ideais para finan√ßas
                        minimos_financas = {
                            "Finan√ßas": 80, "Economia": 85, "Mercado Financeiro": 82,
                            "Contabilidade": 78, "Excel Avan√ßado": 90, "SQL": 75,
                            "Python": 78, "Power BI": 80, "An√°lise de Dados": 82,
                            "Comunica√ß√£o Oral": 78, "Comunica√ß√£o Escrita": 80,
                            "Modelagem Financeira": 84, "Valuation": 83,
                            "Gest√£o Or√ßament√°ria": 80, "Planejamento Financeiro": 82
                        }

                        # Adicionar colunas de an√°lise
                        df["M√≠nimo Ideal"] = df["√Årea"].apply(lambda x: minimos_financas.get(x.strip(), 55))
                        df["Status"] = df.apply(lambda row: "‚úîÔ∏è OK" if row["Pontua√ß√£o"] >= row["M√≠nimo Ideal"] else "‚ùå Abaixo do ideal", axis=1)

                        # Calcular afinidade com √°rea financeira
                        afinidade_df = df[df["√Årea"].isin(minimos_financas.keys())]
                        if not afinidade_df.empty:
                            afinidade_financas = round(afinidade_df["Pontua√ß√£o"].mean(), 1)
                        else:
                            afinidade_financas = 0

                        # Gr√°fico de afinidade
                        st.subheader("üéØ Afinidade com √Årea Financeira")
                        col1, col2 = st.columns([1, 2])
                        
                        with col1:
                            st.metric("Pontua√ß√£o Geral", f"{afinidade_financas}%")
                            if afinidade_financas >= 75:
                                st.success("Excelente afinidade!")
                            elif afinidade_financas >= 60:
                                st.warning("Boa afinidade, mas h√° espa√ßo para melhoria")
                            else:
                                st.error("Afinidade baixa - recomenda-se desenvolvimento")
                        
                        with col2:
                            fig_gauge = go.Figure(go.Indicator(
                                mode = "gauge+number",
                                value = afinidade_financas,
                                domain = {'x': [0, 1], 'y': [0, 1]},
                                title = {'text': "Afinidade Financeira (%)"},
                                gauge = {
                                    'axis': {'range': [None, 100]},
                                    'bar': {'color': "purple"},
                                    'steps': [
                                        {'range': [0, 50], 'color': "lightgray"},
                                        {'range': [50, 75], 'color': "yellow"},
                                        {'range': [75, 100], 'color': "lightgreen"}
                                    ],
                                    'threshold': {
                                        'line': {'color': "red", 'width': 4},
                                        'thickness': 0.75,
                                        'value': 75
                                    }
                                }
                            ))
                            fig_gauge.update_layout(height=300)
                            st.plotly_chart(fig_gauge, use_container_width=True)

                        # Gr√°fico de barras horizontais
                        st.subheader("üìä Compet√™ncias vs M√≠nimos")
                        fig_bar = px.bar(
                            df.sort_values(by="Pontua√ß√£o", ascending=True),
                            x="Pontua√ß√£o",
                            y="√Årea",
                            orientation='h',
                            color="Status",
                            color_discrete_map={"‚úîÔ∏è OK": "green", "‚ùå Abaixo do ideal": "red"},
                            title="Pontua√ß√£o das Compet√™ncias"
                        )
                        fig_bar.update_layout(height=max(400, len(df) * 30))
                        st.plotly_chart(fig_bar, use_container_width=True)

                        # Gr√°fico radar
                        st.subheader("üï∏Ô∏è Radar de Compet√™ncias")
                        if len(df) > 0:
                            fig_radar = go.Figure()
                            
                            fig_radar.add_trace(go.Scatterpolar(
                                r=df["Pontua√ß√£o"].tolist(),
                                theta=df["√Årea"].tolist(),
                                fill='toself',
                                name='Compet√™ncias Atuais',
                                line_color='blue'
                            ))
                            
                            # Adicionar linha de refer√™ncia ideal quando aplic√°vel
                            if not afinidade_df.empty:
                                fig_radar.add_trace(go.Scatterpolar(
                                    r=afinidade_df["M√≠nimo Ideal"].tolist(),
                                    theta=afinidade_df["√Årea"].tolist(),
                                    fill='toself',
                                    name='M√≠nimo Ideal',
                                    line_color='red',
                                    opacity=0.6
                                ))
                            
                            fig_radar.update_layout(
                                polar=dict(
                                    radialaxis=dict(
                                        visible=True,
                                        range=[0, 100]
                                    )),
                                showlegend=True,
                                height=500
                            )
                            
                            st.plotly_chart(fig_radar, use_container_width=True)

                        # An√°lise qualitativa
                        st.header("üìù An√°lise Qualitativa")
                        # Procurar por texto ap√≥s o JSON
                        partes = resposta_completa.split("]")
                        if len(partes) > 1:
                            texto_analise = partes[-1].strip()
                            if texto_analise:
                                st.markdown(texto_analise)
                            else:
                                st.info("An√°lise qualitativa n√£o dispon√≠vel nesta resposta.")
                        else:
                            st.info("An√°lise qualitativa n√£o encontrada na resposta.")

                        # Tabela detalhada com status
                        st.header("üìã An√°lise Detalhada")
                        st.dataframe(
                            df[["√Årea", "Pontua√ß√£o", "M√≠nimo Ideal", "Status"]].sort_values(by="Pontua√ß√£o", ascending=False),
                            use_container_width=True
                        )

                except json.JSONDecodeError as je:
                    st.error(f"‚ùå Erro ao processar JSON: {je}")
                    st.text("Conte√∫do JSON extra√≠do:")
                    st.text("[" + match.group(1) + "]")
                except Exception as pe:
                    st.error(f"‚ùå Erro ao processar dados: {pe}")

        except Exception as e:
            st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
            st.info("Verifique se sua chave de API est√° correta e se voc√™ tem cr√©ditos dispon√≠veis.")

elif uploaded_file and not api_key:
    st.warning("‚ö†Ô∏è Insira sua chave de API para continuar.")
elif api_key and not uploaded_file:
    st.info("üì§ Fa√ßa upload de um curr√≠culo em PDF para iniciar.")
else:
    st.info("üëã Bem-vindo! Insira sua chave de API e fa√ßa upload de um curr√≠culo para come√ßar.")
