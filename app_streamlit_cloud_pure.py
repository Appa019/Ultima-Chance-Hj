import streamlit as st
from openai import OpenAI
import plotly.express as px
import plotly.graph_objects as go
import json
import re
import base64
import math

# Configura√ß√µes da p√°gina Streamlit
st.set_page_config(
    page_title="Assistente de An√°lise InternReady",
    page_icon="üöÄ",
    layout="wide"
)

# T√≠tulo principal
st.title("üöÄ Assistente de An√°lise InternReady")
st.markdown("### An√°lise de curr√≠culo especializada para o setor financeiro")

# Sidebar para entrada da API
with st.sidebar:
    st.header("Configura√ß√µes")
    api_key = st.text_input("üîë Cole sua *Chave InternReady*:", type="password")
    
    st.markdown("---")
    st.markdown("### Como usar:")
    st.markdown("""
    1. Insira sua chave de API
    2. Fa√ßa upload do seu curr√≠culo em PDF
    3. Clique em 'Analisar Curr√≠culo'
    4. Veja os resultados da an√°lise
    """)

# √Årea principal para upload do PDF
st.header("üìÑ Upload do Curr√≠culo")
uploaded_file = st.file_uploader("Envie seu curr√≠culo em PDF", type="pdf")

# Fun√ß√£o para processar o PDF e fazer a an√°lise
def analisar_curriculo(pdf_file, api_key):
    # Ler o conte√∫do do arquivo PDF
    pdf_bytes = pdf_file.getvalue()
    
    # Converter para base64
    pdf_base64 = base64.b64encode(pdf_bytes).decode('utf-8')
    
    # Criar o prompt para a API
    prompt = f"""
    Voc√™ √© um consultor de carreira especializado em perfis voltados para o setor financeiro. 
    O usu√°rio enviou um curr√≠culo em PDF. Sua tarefa √© analisar este curr√≠culo com base em compet√™ncias valorizadas no mercado financeiro.

    **Parte 1 ‚Äì An√°lise Quantitativa**
    - Identifique as principais **√°reas de compet√™ncia profissional** (ex: Finan√ßas, Economia, Risco, An√°lise de Dados, Excel, Programa√ß√£o, Comunica√ß√£o, etc.).
    - Para cada √°rea, atribua uma nota de **0 a 100**, com base nas evid√™ncias fornecidas no texto como um especialista em recursos humanos com muitos anos de pratica. **N√£o infira habilidades n√£o mencionadas.**
    - A resposta deve estar no formato JSON conforme exemplo:

    [
      {{"√Årea": "Gest√£o Financeira", "Pontua√ß√£o": 82}},
      {{"√Årea": "Excel Avan√ßado", "Pontua√ß√£o": 78}}
    ]

    **Parte 2 ‚Äì An√°lise Qualitativa (em portugu√™s)**
    - Pontos fortes mais evidentes
    - Pontos que podem ser melhor desenvolvidos ou explicitados
    - Sugest√µes pr√°ticas para aprimorar o curr√≠culo para o mercado financeiro
    """
    
    # Configurar cliente OpenAI e fazer a chamada
    client = OpenAI(api_key=api_key)
    
    with st.spinner("‚è≥ Analisando com agente de IA..."):
        # Usar a API Vision para analisar o PDF
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:application/pdf;base64,{pdf_base64}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=4000
        )
    
    resposta_completa = response.choices[0].message.content
    
    # Processar JSON da resposta
    match = re.search(r"\[(.*?)\]", resposta_completa, re.DOTALL)
    dados_json = json.loads("[" + match.group(1) + "]")
    
    # Definir m√≠nimos para o setor financeiro
    minimos_financas = {
        "Finan√ßas": 80, "Economia": 85, "Mercado Financeiro": 82,
        "Contabilidade": 78, "Contabilidade Gerencial": 75,
        "An√°lise de Demonstrativos Financeiros": 83, "Controladoria": 75,
        "Tesouraria": 76, "Gest√£o Or√ßament√°ria": 80, "Planejamento Financeiro": 82,
        "An√°lise de Investimentos": 82, "Valuation": 83, "Modelagem Financeira": 84,
        "Riscos Financeiros": 80, "Compliance": 75, "Auditoria": 78,
        "Governan√ßa Corporativa": 76, "Gest√£o de Ativos": 80, "Gest√£o de Riscos": 80,
        "Excel": 92, "Excel Avan√ßado": 90, "Power BI": 80, "SQL": 75,
        "Python": 78, "R": 75, "VBA": 70, "Access": 65, "ETL": 70,
        "An√°lise de Dados": 82, "Business Intelligence": 80, "Data Analytics": 82,
        "Big Data": 70, "Dashboards": 78, "CVM": 75, "Bacen": 75,
        "IFRS": 80, "Normas Cont√°beis": 77, "Regula√ß√£o Banc√°ria": 78,
        "Ingl√™s": 85, "Espanhol": 70, "Comunica√ß√£o Escrita": 80,
        "Comunica√ß√£o Oral": 78, "Apresenta√ß√µes Executivas": 80,
        "Gest√£o de Projetos": 75, "Lideran√ßa": 78, "Tomada de Decis√£o": 80,
        "Pensamento Cr√≠tico": 82, "Resolu√ß√£o de Problemas": 80,
        "Trabalho em Equipe": 78, "Autonomia": 76, "Proatividade": 78,
        "√âtica Profissional": 85, "Organiza√ß√£o": 75,
    }
    
    # Processar dados sem pandas
    areas = []
    pontuacoes = []
    minimos = []
    status = []
    
    # Ordenar por pontua√ß√£o (ascendente)
    dados_json.sort(key=lambda x: x["Pontua√ß√£o"])
    
    for item in dados_json:
        area = item["√Årea"]
        pontuacao = item["Pontua√ß√£o"]
        areas.append(area)
        pontuacoes.append(pontuacao)
        
        # Obter m√≠nimo ideal
        minimo = minimos_financas.get(area.strip(), 55)
        minimos.append(minimo)
        
        # Definir status
        if pontuacao >= minimo:
            status.append("‚úîÔ∏è OK")
        else:
            status.append("‚ùå Abaixo do ideal")
    
    # Calcular afinidade com √°rea financeira
    areas_financas = []
    pontuacoes_financas = []
    
    for i, area in enumerate(areas):
        if area in minimos_financas:
            areas_financas.append(area)
            pontuacoes_financas.append(pontuacoes[i])
    
    if pontuacoes_financas:
        afinidade_financas = round(sum(pontuacoes_financas) / len(pontuacoes_financas), 1)
    else:
        afinidade_financas = 0
    
    # Extrair texto da an√°lise qualitativa
    texto_analise = resposta_completa.split("]")[-1].strip()
    
    # Criar estrutura de dados para tabela
    tabela_dados = []
    for i in range(len(areas)):
        tabela_dados.append({
            "√Årea": areas[i],
            "Pontua√ß√£o": pontuacoes[i],
            "M√≠nimo Ideal": minimos[i],
            "Status": status[i]
        })
    
    return tabela_dados, areas, pontuacoes, minimos, status, afinidade_financas, texto_analise

# Bot√£o para iniciar an√°lise
if uploaded_file is not None and api_key:
    if st.button("üîç Analisar Curr√≠culo"):
        try:
            tabela_dados, areas, pontuacoes, minimos, status, afinidade_financas, texto_analise = analisar_curriculo(uploaded_file, api_key)
            
            # Exibir resultados
            st.success("‚úÖ An√°lise conclu√≠da com sucesso!")
            
            # Exibir tabela de compet√™ncias
            st.header("üìå Tabela de Compet√™ncias:")
            st.table(tabela_dados)
            
            # Criar visualiza√ß√µes em colunas
            col1, col2 = st.columns(2)
            
            # Gr√°fico de afinidade com √°rea financeira
            with col1:
                fig = go.Figure(go.Bar(
                    x=["Afinidade com √Årea Financeira"],
                    y=[afinidade_financas],
                    marker_color='purple'
                ))
                fig.add_shape(
                    type="line",
                    x0=-0.5,
                    x1=0.5,
                    y0=75,
                    y1=75,
                    line=dict(color="gray", width=2, dash="dash"),
                )
                fig.update_layout(
                    title="üéØ Afinidade com o Setor Financeiro",
                    yaxis=dict(title="Pontua√ß√£o M√©dia (%)", range=[0, 100]),
                    showlegend=False
                )
                st.plotly_chart(fig)
            
            # Gr√°fico de compet√™ncias vs m√≠nimos
            with col2:
                cores = ['green' if s == "‚úîÔ∏è OK" else 'red' for s in status]
                fig = go.Figure()
                fig.add_trace(go.Bar(
                    y=areas,
                    x=pontuacoes,
                    orientation='h',
                    marker_color=cores
                ))
                fig.update_layout(
                    title="üìä Compet√™ncias vs M√≠nimos Recomendados (Finan√ßas)",
                    xaxis=dict(title="Pontua√ß√£o (0 a 100)"),
                    height=max(400, len(areas) * 25)
                )
                st.plotly_chart(fig)
            
            # Segunda linha de gr√°ficos
            col3, col4 = st.columns(2)
            
            # Gr√°fico de dispers√£o
            with col3:
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=areas,
                    y=pontuacoes,
                    mode='markers',
                    marker=dict(size=12),
                    name='Pontua√ß√£o'
                ))
                fig.add_trace(go.Scatter(
                    x=areas,
                    y=minimos,
                    mode='markers',
                    marker=dict(symbol='x', size=8, color='orange'),
                    name='M√≠nimo Ideal'
                ))
                fig.add_shape(
                    type="line",
                    x0=-0.5,
                    x1=len(areas) - 0.5,
                    y0=50,
                    y1=50,
                    line=dict(color="gray", width=2, dash="dash"),
                )
                fig.update_layout(
                    title="üìç Dispers√£o de Pontua√ß√µes por √Årea",
                    yaxis=dict(title="Pontua√ß√£o"),
                    xaxis=dict(tickangle=45),
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )
                st.plotly_chart(fig)
            
            # Gr√°fico de distribui√ß√£o por n√≠vel
            with col4:
                # Classificar pontua√ß√µes por n√≠vel
                baixa = sum(1 for p in pontuacoes if p < 50)
                media = sum(1 for p in pontuacoes if 50 <= p < 75)
                alta = sum(1 for p in pontuacoes if p >= 75)
                
                fig = go.Figure(go.Bar(
                    x=["Baixa", "M√©dia", "Alta"],
                    y=[baixa, media, alta],
                    marker_color=['red', 'orange', 'green']
                ))
                fig.update_layout(
                    title="üìò Distribui√ß√£o de Compet√™ncias por N√≠vel",
                    yaxis=dict(title="N√∫mero de √Åreas"),
                    xaxis=dict(title="N√≠vel")
                )
                st.plotly_chart(fig)
            
            # Gr√°fico radar
            st.subheader("üï∏Ô∏è Radar de Compet√™ncias")
            
            # Preparar dados para o radar
            areas_radar = areas.copy()
            pontuacoes_radar = pontuacoes.copy()
            areas_radar.append(areas_radar[0])
            pontuacoes_radar.append(pontuacoes_radar[0])
            
            # Calcular √¢ngulos para o radar
            theta = []
            for i in range(len(areas_radar)):
                theta.append(i * 2 * math.pi / (len(areas_radar) - 1))
            
            fig = go.Figure()
            fig.add_trace(go.Scatterpolar(
                r=pontuacoes_radar,
                theta=areas_radar,
                fill='toself',
                name='Compet√™ncias'
            ))
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100]
                    )
                ),
                showlegend=False,
                title="üï∏Ô∏è Radar de Compet√™ncias"
            )
            st.plotly_chart(fig)
            
            # An√°lise textual
            st.header("üìù An√°lise Qualitativa:")
            st.markdown(texto_analise)
            
        except Exception as e:
            st.error(f"Ocorreu um erro durante a an√°lise: {str(e)}")
            st.info("Verifique se a chave da API est√° correta e tente novamente.")
elif not api_key and uploaded_file:
    st.warning("‚ö†Ô∏è Por favor, insira sua chave de API para continuar.")
elif api_key and not uploaded_file:
    st.info("üì§ Fa√ßa o upload do seu curr√≠culo em PDF para iniciar a an√°lise.")

# Rodap√©
st.markdown("---")
st.markdown("### Desenvolvido com ‚ù§Ô∏è pelo InternReady")
st.markdown("Assistente de An√°lise de Curr√≠culo para o Setor Financeiro")
